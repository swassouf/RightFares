// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.61
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using Organization.Application.DTO.Entities;

namespace Organization.Application.Repository.Context
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class FakeDispatchContext : IDispatchContext
    {
        public System.Data.Entity.DbSet<Address> Addresses { get; set; }
        public System.Data.Entity.DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public System.Data.Entity.DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public System.Data.Entity.DbSet<City> Cities { get; set; }
        public System.Data.Entity.DbSet<CountryPhoneCode> CountryPhoneCodes { get; set; }
        public System.Data.Entity.DbSet<CountryRegion> CountryRegions { get; set; }
        public System.Data.Entity.DbSet<Coupon> Coupons { get; set; }
        public System.Data.Entity.DbSet<CustomerComplaint> CustomerComplaints { get; set; }
        public System.Data.Entity.DbSet<DistanceUnit> DistanceUnits { get; set; }
        public System.Data.Entity.DbSet<Document> Documents { get; set; }
        public System.Data.Entity.DbSet<EmailTemplate> EmailTemplates { get; set; }
        public System.Data.Entity.DbSet<Fare> Fares { get; set; }
        public System.Data.Entity.DbSet<FareStatu> FareStatus { get; set; }
        public System.Data.Entity.DbSet<FareToPersonRelation> FareToPersonRelations { get; set; }
        public System.Data.Entity.DbSet<Location> Locations { get; set; }
        public System.Data.Entity.DbSet<MobileVerification> MobileVerifications { get; set; }
        public System.Data.Entity.DbSet<MoneyUnit> MoneyUnits { get; set; }
        public System.Data.Entity.DbSet<Person> People { get; set; }
        public System.Data.Entity.DbSet<PersonDocument> PersonDocuments { get; set; }
        public System.Data.Entity.DbSet<PersonRole> PersonRoles { get; set; }
        public System.Data.Entity.DbSet<PersonToCoupon> PersonToCoupons { get; set; }
        public System.Data.Entity.DbSet<Reason> Reasons { get; set; }
        public System.Data.Entity.DbSet<ReasonType> ReasonTypes { get; set; }
        public System.Data.Entity.DbSet<Role> Roles { get; set; }
        public System.Data.Entity.DbSet<StateProvince> StateProvinces { get; set; }
        public System.Data.Entity.DbSet<Transport> Transports { get; set; }
        public System.Data.Entity.DbSet<TransportOption> TransportOptions { get; set; }
        public System.Data.Entity.DbSet<TransportOptionToCityFarePrice> TransportOptionToCityFarePrices { get; set; }
        public System.Data.Entity.DbSet<TransportOptionToCountryFarePrice> TransportOptionToCountryFarePrices { get; set; }
        public System.Data.Entity.DbSet<TransportToFareRelation> TransportToFareRelations { get; set; }
        public System.Data.Entity.DbSet<TransportType> TransportTypes { get; set; }

        public FakeDispatchContext()
        {
            Addresses = new FakeDbSet<Address>("ID");
            AspNetUserClaims = new FakeDbSet<AspNetUserClaim>("ID");
            AspNetUserLogins = new FakeDbSet<AspNetUserLogin>("ID");
            Cities = new FakeDbSet<City>("ID");
            CountryPhoneCodes = new FakeDbSet<CountryPhoneCode>("ID");
            CountryRegions = new FakeDbSet<CountryRegion>("ID");
            Coupons = new FakeDbSet<Coupon>("ID");
            CustomerComplaints = new FakeDbSet<CustomerComplaint>("ID");
            DistanceUnits = new FakeDbSet<DistanceUnit>("ID");
            Documents = new FakeDbSet<Document>("ID");
            EmailTemplates = new FakeDbSet<EmailTemplate>("ID");
            Fares = new FakeDbSet<Fare>("ID");
            FareStatus = new FakeDbSet<FareStatu>("ID");
            FareToPersonRelations = new FakeDbSet<FareToPersonRelation>("ID");
            Locations = new FakeDbSet<Location>("ID");
            MobileVerifications = new FakeDbSet<MobileVerification>("ID");
            MoneyUnits = new FakeDbSet<MoneyUnit>("ID");
            People = new FakeDbSet<Person>("ID");
            PersonDocuments = new FakeDbSet<PersonDocument>("ID");
            PersonRoles = new FakeDbSet<PersonRole>("ID");
            PersonToCoupons = new FakeDbSet<PersonToCoupon>("ID");
            Reasons = new FakeDbSet<Reason>("ID");
            ReasonTypes = new FakeDbSet<ReasonType>("ID");
            Roles = new FakeDbSet<Role>("ID");
            StateProvinces = new FakeDbSet<StateProvince>("ID");
            Transports = new FakeDbSet<Transport>("ID");
            TransportOptions = new FakeDbSet<TransportOption>("ID");
            TransportOptionToCityFarePrices = new FakeDbSet<TransportOptionToCityFarePrice>("ID");
            TransportOptionToCountryFarePrices = new FakeDbSet<TransportOptionToCountryFarePrice>("ID");
            TransportToFareRelations = new FakeDbSet<TransportToFareRelation>("ID");
            TransportTypes = new FakeDbSet<TransportType>("ID");

            InitializePartial();
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        partial void InitializePartial();

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        // Stored Procedures
        public GetNearByVehiclesReturnModel GetNearByVehicles(decimal? lat, decimal? @long, int? transportOptionId, int? transportId)
        {
            int procResult;
            return GetNearByVehicles(lat, @long, transportOptionId, transportId, out procResult);
        }

        public GetNearByVehiclesReturnModel GetNearByVehicles(decimal? lat, decimal? @long, int? transportOptionId, int? transportId, out int procResult)
        {

            procResult = 0;
            return new GetNearByVehiclesReturnModel();
        }

        public System.Threading.Tasks.Task<GetNearByVehiclesReturnModel> GetNearByVehiclesAsync(decimal? lat, decimal? @long, int? transportOptionId, int? transportId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetNearByVehicles(lat, @long, transportOptionId, transportId, out procResult));
        }

    }
}
// </auto-generated>
