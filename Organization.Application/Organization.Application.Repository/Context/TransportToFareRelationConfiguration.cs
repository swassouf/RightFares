// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.61
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using Organization.Application.DTO.Entities;

namespace Organization.Application.Repository.Context
{

    // TransportToFareRelation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class TransportToFareRelationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TransportToFareRelation>
    {
        public TransportToFareRelationConfiguration()
            : this("dbo")
        {
        }

        public TransportToFareRelationConfiguration(string schema)
        {
            ToTable("TransportToFareRelation", schema);
            HasKey(x => x.ID);

            Property(x => x.ID).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.TransportId).HasColumnName(@"TransportID").IsRequired().HasColumnType("int");
            Property(x => x.FareId).HasColumnName(@"FareID").IsRequired().HasColumnType("int");
            Property(x => x.FareStatusId).HasColumnName(@"FareStatusID").IsRequired().HasColumnType("int");
            Property(x => x.FareAcceptedDate).HasColumnName(@"FareAcceptedDate").IsOptional().HasColumnType("datetime");
            Property(x => x.IsFareAcceptedAcknowledged).HasColumnName(@"IsFareAcceptedAcknowledged").IsRequired().HasColumnType("bit");
            Property(x => x.IsCalledOut).HasColumnName(@"IsCalledOut").IsRequired().HasColumnType("bit");
            Property(x => x.IsCallOutAcknowledged).HasColumnName(@"IsCallOutAcknowledged").IsRequired().HasColumnType("bit");
            Property(x => x.MinutesOut).HasColumnName(@"MinutesOut").IsOptional().HasColumnType("int");
            Property(x => x.ReasonId).HasColumnName(@"ReasonID").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.Reason).WithMany(b => b.TransportToFareRelations).HasForeignKey(c => c.ReasonId).WillCascadeOnDelete(false); // FK_TransportToFareRelation_Reason
            HasRequired(a => a.Fare).WithMany(b => b.TransportToFareRelations).HasForeignKey(c => c.FareId).WillCascadeOnDelete(false); // FK_TransportToFareRelation_Fares
            HasRequired(a => a.FareStatu).WithMany(b => b.TransportToFareRelations).HasForeignKey(c => c.FareStatusId).WillCascadeOnDelete(false); // FK_TransportToFareRelation_FareStatus
            HasRequired(a => a.Transport).WithMany(b => b.TransportToFareRelations).HasForeignKey(c => c.TransportId).WillCascadeOnDelete(false); // FK_TransportToFareRelation_Transport
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
