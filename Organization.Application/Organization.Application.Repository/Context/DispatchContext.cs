// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.61
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using Organization.Application.DTO.Entities;

namespace Organization.Application.Repository.Context
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public partial class DispatchContext : System.Data.Entity.DbContext, IDispatchContext
    {
        public System.Data.Entity.DbSet<Address> Addresses { get; set; } // Address
        public System.Data.Entity.DbSet<AspNetUserClaim> AspNetUserClaims { get; set; } // AspNetUserClaims
        public System.Data.Entity.DbSet<AspNetUserLogin> AspNetUserLogins { get; set; } // AspNetUserLogins
        public System.Data.Entity.DbSet<City> Cities { get; set; } // City
        public System.Data.Entity.DbSet<CountryPhoneCode> CountryPhoneCodes { get; set; } // CountryPhoneCode
        public System.Data.Entity.DbSet<CountryRegion> CountryRegions { get; set; } // CountryRegion
        public System.Data.Entity.DbSet<Coupon> Coupons { get; set; } // Coupon
        public System.Data.Entity.DbSet<CustomerComplaint> CustomerComplaints { get; set; } // CustomerComplaint
        public System.Data.Entity.DbSet<DistanceUnit> DistanceUnits { get; set; } // DistanceUnit
        public System.Data.Entity.DbSet<Document> Documents { get; set; } // Document
        public System.Data.Entity.DbSet<EmailTemplate> EmailTemplates { get; set; } // EmailTemplate
        public System.Data.Entity.DbSet<Fare> Fares { get; set; } // Fares
        public System.Data.Entity.DbSet<FareStatu> FareStatus { get; set; } // FareStatus
        public System.Data.Entity.DbSet<FareToPersonRelation> FareToPersonRelations { get; set; } // FareToPersonRelation
        public System.Data.Entity.DbSet<Location> Locations { get; set; } // Location
        public System.Data.Entity.DbSet<MobileVerification> MobileVerifications { get; set; } // MobileVerification
        public System.Data.Entity.DbSet<MoneyUnit> MoneyUnits { get; set; } // MoneyUnit
        public System.Data.Entity.DbSet<Person> People { get; set; } // Person
        public System.Data.Entity.DbSet<PersonDocument> PersonDocuments { get; set; } // PersonDocument
        public System.Data.Entity.DbSet<PersonRole> PersonRoles { get; set; } // PersonRole
        public System.Data.Entity.DbSet<PersonToCoupon> PersonToCoupons { get; set; } // PersonToCoupon
        public System.Data.Entity.DbSet<Reason> Reasons { get; set; } // Reason
        public System.Data.Entity.DbSet<ReasonType> ReasonTypes { get; set; } // ReasonType
        public System.Data.Entity.DbSet<Role> Roles { get; set; } // Role
        public System.Data.Entity.DbSet<StateProvince> StateProvinces { get; set; } // StateProvince
        public System.Data.Entity.DbSet<Transport> Transports { get; set; } // Transport
        public System.Data.Entity.DbSet<TransportOption> TransportOptions { get; set; } // TransportOption
        public System.Data.Entity.DbSet<TransportOptionToCityFarePrice> TransportOptionToCityFarePrices { get; set; } // TransportOptionToCityFarePrice
        public System.Data.Entity.DbSet<TransportOptionToCountryFarePrice> TransportOptionToCountryFarePrices { get; set; } // TransportOptionToCountryFarePrice
        public System.Data.Entity.DbSet<TransportToFareRelation> TransportToFareRelations { get; set; } // TransportToFareRelation
        public System.Data.Entity.DbSet<TransportType> TransportTypes { get; set; } // TransportType

        static DispatchContext()
        {
            System.Data.Entity.Database.SetInitializer<DispatchContext>(null);
        }

        public DispatchContext()
            : base("Name=Dispatch")
        {
            InitializePartial();
        }

        public DispatchContext(string connectionString)
            : base(connectionString)
        {
            InitializePartial();
        }

        public DispatchContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
            InitializePartial();
        }

        public DispatchContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
            InitializePartial();
        }

        public DispatchContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AddressConfiguration());
            modelBuilder.Configurations.Add(new AspNetUserClaimConfiguration());
            modelBuilder.Configurations.Add(new AspNetUserLoginConfiguration());
            modelBuilder.Configurations.Add(new CityConfiguration());
            modelBuilder.Configurations.Add(new CountryPhoneCodeConfiguration());
            modelBuilder.Configurations.Add(new CountryRegionConfiguration());
            modelBuilder.Configurations.Add(new CouponConfiguration());
            modelBuilder.Configurations.Add(new CustomerComplaintConfiguration());
            modelBuilder.Configurations.Add(new DistanceUnitConfiguration());
            modelBuilder.Configurations.Add(new DocumentConfiguration());
            modelBuilder.Configurations.Add(new EmailTemplateConfiguration());
            modelBuilder.Configurations.Add(new FareConfiguration());
            modelBuilder.Configurations.Add(new FareStatuConfiguration());
            modelBuilder.Configurations.Add(new FareToPersonRelationConfiguration());
            modelBuilder.Configurations.Add(new LocationConfiguration());
            modelBuilder.Configurations.Add(new MobileVerificationConfiguration());
            modelBuilder.Configurations.Add(new MoneyUnitConfiguration());
            modelBuilder.Configurations.Add(new PersonConfiguration());
            modelBuilder.Configurations.Add(new PersonDocumentConfiguration());
            modelBuilder.Configurations.Add(new PersonRoleConfiguration());
            modelBuilder.Configurations.Add(new PersonToCouponConfiguration());
            modelBuilder.Configurations.Add(new ReasonConfiguration());
            modelBuilder.Configurations.Add(new ReasonTypeConfiguration());
            modelBuilder.Configurations.Add(new RoleConfiguration());
            modelBuilder.Configurations.Add(new StateProvinceConfiguration());
            modelBuilder.Configurations.Add(new TransportConfiguration());
            modelBuilder.Configurations.Add(new TransportOptionConfiguration());
            modelBuilder.Configurations.Add(new TransportOptionToCityFarePriceConfiguration());
            modelBuilder.Configurations.Add(new TransportOptionToCountryFarePriceConfiguration());
            modelBuilder.Configurations.Add(new TransportToFareRelationConfiguration());
            modelBuilder.Configurations.Add(new TransportTypeConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AddressConfiguration(schema));
            modelBuilder.Configurations.Add(new AspNetUserClaimConfiguration(schema));
            modelBuilder.Configurations.Add(new AspNetUserLoginConfiguration(schema));
            modelBuilder.Configurations.Add(new CityConfiguration(schema));
            modelBuilder.Configurations.Add(new CountryPhoneCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new CountryRegionConfiguration(schema));
            modelBuilder.Configurations.Add(new CouponConfiguration(schema));
            modelBuilder.Configurations.Add(new CustomerComplaintConfiguration(schema));
            modelBuilder.Configurations.Add(new DistanceUnitConfiguration(schema));
            modelBuilder.Configurations.Add(new DocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new EmailTemplateConfiguration(schema));
            modelBuilder.Configurations.Add(new FareConfiguration(schema));
            modelBuilder.Configurations.Add(new FareStatuConfiguration(schema));
            modelBuilder.Configurations.Add(new FareToPersonRelationConfiguration(schema));
            modelBuilder.Configurations.Add(new LocationConfiguration(schema));
            modelBuilder.Configurations.Add(new MobileVerificationConfiguration(schema));
            modelBuilder.Configurations.Add(new MoneyUnitConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonDocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonRoleConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonToCouponConfiguration(schema));
            modelBuilder.Configurations.Add(new ReasonConfiguration(schema));
            modelBuilder.Configurations.Add(new ReasonTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new RoleConfiguration(schema));
            modelBuilder.Configurations.Add(new StateProvinceConfiguration(schema));
            modelBuilder.Configurations.Add(new TransportConfiguration(schema));
            modelBuilder.Configurations.Add(new TransportOptionConfiguration(schema));
            modelBuilder.Configurations.Add(new TransportOptionToCityFarePriceConfiguration(schema));
            modelBuilder.Configurations.Add(new TransportOptionToCountryFarePriceConfiguration(schema));
            modelBuilder.Configurations.Add(new TransportToFareRelationConfiguration(schema));
            modelBuilder.Configurations.Add(new TransportTypeConfiguration(schema));
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);
        
        // Stored Procedures
        public GetNearByVehiclesReturnModel GetNearByVehicles(decimal? lat, decimal? @long, int? transportOptionId, int? transportId)
        {
            var latParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@lat", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = lat.GetValueOrDefault(), Precision = 9, Scale = 6 };
            if (!lat.HasValue)
                latParam.Value = System.DBNull.Value;

            var @longParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@long", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = @long.GetValueOrDefault(), Precision = 9, Scale = 6 };
            if (!@long.HasValue)
                @longParam.Value = System.DBNull.Value;

            var transportOptionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@transportOptionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = transportOptionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!transportOptionId.HasValue)
                transportOptionIdParam.Value = System.DBNull.Value;

            var transportIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@transportId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = transportId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!transportId.HasValue)
                transportIdParam.Value = System.DBNull.Value;


            var procResultData = new GetNearByVehiclesReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[GetNearByVehicles]";
            cmd.Parameters.Add(latParam);
            cmd.Parameters.Add(@longParam);
            cmd.Parameters.Add(transportOptionIdParam);
            cmd.Parameters.Add(transportIdParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetNearByVehiclesReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<GetNearByVehiclesReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<GetNearByVehiclesReturnModel> GetNearByVehiclesAsync(decimal? lat, decimal? @long, int? transportOptionId, int? transportId)
        {
            var latParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@lat", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = lat.GetValueOrDefault(), Precision = 9, Scale = 6 };
            if (!lat.HasValue)
                latParam.Value = System.DBNull.Value;

            var @longParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@long", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = @long.GetValueOrDefault(), Precision = 9, Scale = 6 };
            if (!@long.HasValue)
                @longParam.Value = System.DBNull.Value;

            var transportOptionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@transportOptionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = transportOptionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!transportOptionId.HasValue)
                transportOptionIdParam.Value = System.DBNull.Value;

            var transportIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@transportId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = transportId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!transportId.HasValue)
                transportIdParam.Value = System.DBNull.Value;


            var procResultData = new GetNearByVehiclesReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[GetNearByVehicles]";
            cmd.Parameters.Add(latParam);
            cmd.Parameters.Add(@longParam);
            cmd.Parameters.Add(transportOptionIdParam);
            cmd.Parameters.Add(transportIdParam);

            try
            {
                Database.Connection.Open();
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetNearByVehiclesReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<GetNearByVehiclesReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

    }
}
// </auto-generated>
